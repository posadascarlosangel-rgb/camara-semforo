<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aplicación de Grabación</title>
    <!-- Incluye el manifiesto de la PWA para la instalación -->
    <link rel="manifest" href="/manifest.json">
    <!-- Incluye la fuente Inter para un diseño moderno -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap">
    <!-- Incluye Tailwind CSS para un estilo rápido y responsivo -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 1rem;
        }

        .button-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 2rem;
            text-align: center;
            padding: 2rem;
            background-color: white;
            border-radius: 1.5rem;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }

        /* Estilos base para el botón con transiciones suaves */
        #record-button {
            width: 100px;
            height: 100px;
            border-radius: 9999px;
            border: none;
            cursor: pointer;
            transition-property: background-color, transform, box-shadow;
            transition-duration: 0.3s;
            transition-timing-function: ease-in-out;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 1.25rem;
            font-weight: 700;
            user-select: none;
            touch-action: manipulation; /* Mejor manejo en pantallas táctiles */
        }

        /* Colores y sombras para cada estado del botón */
        #record-button.stopped {
            background-color: #ef4444; /* Rojo */
        }

        #record-button.recording {
            background-color: #22c55e; /* Verde */
        }

        #record-button.paused {
            background-color: #facc15; /* Amarillo */
        }

        /* Efecto de 'presión' al hacer clic */
        #record-button:active {
            transform: scale(0.95);
            box-shadow: none;
        }

        /* Animación para el estado de "Grabando" */
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        #record-button.recording {
            animation: pulse 1.5s infinite;
        }
    </style>
</head>
<body>
    <div class="button-container">
        <!-- Título descriptivo -->
        <h1 class="text-3xl font-bold text-gray-800">Simulador de Grabación</h1>

        <!-- El botón interactivo -->
        <button id="record-button" class="stopped">
        </button>

        <!-- Un espacio para mostrar el estado actual en texto -->
        <div id="state-text" class="text-xl text-gray-600 font-medium mt-4">
            Pulsa el botón para empezar
        </div>
    </div>
    
    <div class="flex justify-center mt-8 w-full max-w-lg mx-auto">
        <div class="bg-white p-6 rounded-2xl shadow-md w-full">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 text-center">Analizador de Guion de Video ✨</h2>
            <textarea id="script-input" rows="5" class="w-full p-3 rounded-lg border-2 border-gray-300 focus:outline-none focus:border-blue-500 transition-colors duration-200" placeholder="Pega aquí el guion de tu video para que Gemini lo resuma..."></textarea>
            <button id="summarize-button" class="w-full mt-4 px-6 py-3 bg-blue-600 text-white font-bold rounded-xl shadow-lg hover:bg-blue-700 transition-colors duration-200 active:scale-95">
                Generar Resumen ✨
            </button>
            <div id="summary-output" class="mt-6 text-gray-700 p-4 bg-gray-100 rounded-lg hidden">
                <p class="font-bold">Resumen:</p>
                <div id="summary-text" class="mt-2 text-sm leading-relaxed text-gray-800"></div>
            </div>
            <div id="loading-spinner" class="mt-6 text-center hidden">
                <div class="animate-spin inline-block w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full"></div>
                <p class="mt-2 text-gray-500">Generando resumen...</p>
            </div>
        </div>
    </div>

    <script>
        // Obtiene las referencias a los elementos del DOM.
        const recordButton = document.getElementById('record-button');
        const stateText = document.getElementById('state-text');
        const scriptInput = document.getElementById('script-input');
        const summarizeButton = document.getElementById('summarize-button');
        const summaryOutput = document.getElementById('summary-output');
        const summaryText = document.getElementById('summary-text');
        const loadingSpinner = document.getElementById('loading-spinner');

        // Define los estados de la aplicación.
        const states = {
            stopped: { color: 'stopped', text: 'Grabar' },
            recording: { color: 'recording', text: 'Grabando' },
            paused: { color: 'paused', text: 'Pausa' }
        };

        let currentState = 'stopped';
        let doubleClickTimer = null;

        // Función para actualizar la apariencia del botón.
        function updateButton(state) {
            recordButton.className = state.color;
            recordButton.textContent = state.text;
        }

        // Maneja el evento de un solo clic.
        recordButton.addEventListener('click', () => {
            // Usa un temporizador para distinguir entre clic simple y doble clic.
            if (doubleClickTimer) {
                clearTimeout(doubleClickTimer);
                doubleClickTimer = null;
                // No hace nada si es parte de un doble clic
                return;
            }

            doubleClickTimer = setTimeout(() => {
                doubleClickTimer = null;
                if (currentState === 'stopped') {
                    currentState = 'recording';
                    stateText.textContent = "Grabando...";
                } else if (currentState === 'recording') {
                    currentState = 'paused';
                    stateText.textContent = "Grabación en pausa";
                } else if (currentState === 'paused') {
                    currentState = 'recording';
                    stateText.textContent = "Reanudando...";
                }
                updateButton(states[currentState]);
            }, 250); // El tiempo en milisegundos para detectar el doble clic.
        });

        // Maneja el evento de doble clic para detener.
        recordButton.addEventListener('dblclick', () => {
            if (doubleClickTimer) {
                clearTimeout(doubleClickTimer);
                doubleClickTimer = null;
            }
            currentState = 'stopped';
            updateButton(states[currentState]);
            stateText.textContent = "Grabación detenida";
        });

        // Maneja el evento del botón de resumen
        summarizeButton.addEventListener('click', async () => {
            const userQuery = scriptInput.value.trim();

            if (userQuery === "") {
                summaryOutput.classList.add('hidden');
                loadingSpinner.classList.add('hidden');
                return;
            }

            // Muestra el spinner de carga
            loadingSpinner.classList.remove('hidden');
            summaryOutput.classList.add('hidden');
            summaryText.textContent = '';
            
            // Constantes para la API de Gemini
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

            // Configuración del payload de la API
            const payload = {
                contents: [{
                    parts: [{ text: userQuery }]
                }],
                systemInstruction: {
                    parts: [{ text: "Actúa como un analista de video profesional. Proporciona un resumen conciso y claro de la transcripción del video. El resumen debe ser breve y directo. No incluyas un título o frases introductorias." }]
                },
                tools: [{ "google_search": {} }]
            };

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                const result = await response.json();
                const text = result?.candidates?.[0]?.content?.parts?.[0]?.text;

                if (text) {
                    summaryText.textContent = text;
                    summaryOutput.classList.remove('hidden');
                } else {
                    summaryText.textContent = "No se pudo generar el resumen. Inténtalo de nuevo.";
                    summaryOutput.classList.remove('hidden');
                }
            } catch (error) {
                console.error('Error al llamar a la API de Gemini:', error);
                summaryText.textContent = "Ocurrió un error. Por favor, revisa la consola para más detalles.";
                summaryOutput.classList.remove('hidden');
            } finally {
                loadingSpinner.classList.add('hidden');
            }
        });

        // Inicializa el botón en su estado inicial.
        document.addEventListener('DOMContentLoaded', () => {
            updateButton(states.stopped);

            // Registra el Service Worker
            if ('serviceWorker' in navigator) {
                window.addEventListener('load', () => {
                    navigator.serviceWorker.register('/service-worker.js')
                        .then(registration => {
                            console.log('Service Worker registrado con éxito:', registration);
                        })
                        .catch(error => {
                            console.log('Fallo el registro del Service Worker:', error);
                        });
                });
            }
        });
    </script>
</body>
</html>

  "name": "App de Grabación",
  "short_name": "Grabadora",
  "description": "Una aplicación para simular la grabación y resumir guiones de video.",
  "start_url": "/grabadora.html",
  "display": "standalone",
  "background_color": "#f3f4f6",
  "theme_color": "#22c55e",
  "icons": [
    {
      "src": "/android-chrome-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/android-chrome-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aplicación de Grabación</title>
    <!-- Incluye el manifiesto de la PWA para la instalación -->
    <link rel="manifest" href="/manifest.json">
    <!-- Incluye la fuente Inter para un diseño moderno -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap">
    <!-- Incluye Tailwind CSS para un estilo rápido y responsivo -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 1rem;
        }

        .button-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 2rem;
            text-align: center;
            padding: 2rem;
            background-color: white;
            border-radius: 1.5rem;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }

        /* Estilos base para el botón con transiciones suaves */
        #record-button {
            width: 100px;
            height: 100px;
            border-radius: 9999px;
            border: none;
            cursor: pointer;
            transition-property: background-color, transform, box-shadow;
            transition-duration: 0.3s;
            transition-timing-function: ease-in-out;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 1.25rem;
            font-weight: 700;
            user-select: none;
            touch-action: manipulation; /* Mejor manejo en pantallas táctiles */
        }

        /* Colores y sombras para cada estado del botón */
        #record-button.stopped {
            background-color: #ef4444; /* Rojo */
        }

        #record-button.recording {
            background-color: #22c55e; /* Verde */
        }

        #record-button.paused {
            background-color: #facc15; /* Amarillo */
        }

        /* Efecto de 'presión' al hacer clic */
        #record-button:active {
            transform: scale(0.95);
            box-shadow: none;
        }

        /* Animación para el estado de "Grabando" */
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        #record-button.recording {
            animation: pulse 1.5s infinite;
        }
    </style>
</head>
<body>
    <div class="button-container">
        <!-- Título descriptivo -->
        <h1 class="text-3xl font-bold text-gray-800">Simulador de Grabación</h1>

        <!-- El botón interactivo -->
        <button id="record-button" class="stopped">
        </button>

        <!-- Un espacio para mostrar el estado actual en texto -->
        <div id="state-text" class="text-xl text-gray-600 font-medium mt-4">
            Pulsa el botón para empezar
        </div>
    </div>
    
    <div class="flex justify-center mt-8 w-full max-w-lg mx-auto">
        <div class="bg-white p-6 rounded-2xl shadow-md w-full">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 text-center">Analizador de Guion de Video ✨</h2>
            <textarea id="script-input" rows="5" class="w-full p-3 rounded-lg border-2 border-gray-300 focus:outline-none focus:border-blue-500 transition-colors duration-200" placeholder="Pega aquí el guion de tu video para que Gemini lo resuma..."></textarea>
            <button id="summarize-button" class="w-full mt-4 px-6 py-3 bg-blue-600 text-white font-bold rounded-xl shadow-lg hover:bg-blue-700 transition-colors duration-200 active:scale-95">
                Generar Resumen ✨
            </button>
            <div id="summary-output" class="mt-6 text-gray-700 p-4 bg-gray-100 rounded-lg hidden">
                <p class="font-bold">Resumen:</p>
                <div id="summary-text" class="mt-2 text-sm leading-relaxed text-gray-800"></div>
            </div>
            <div id="loading-spinner" class="mt-6 text-center hidden">
                <div class="animate-spin inline-block w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full"></div>
                <p class="mt-2 text-gray-500">Generando resumen...</p>
            </div>
        </div>
    </div>

    <script>
        // Obtiene las referencias a los elementos del DOM.
        const recordButton = document.getElementById('record-button');
        const stateText = document.getElementById('state-text');
        const scriptInput = document.getElementById('script-input');
        const summarizeButton = document.getElementById('summarize-button');
        const summaryOutput = document.getElementById('summary-output');
        const summaryText = document.getElementById('summary-text');
        const loadingSpinner = document.getElementById('loading-spinner');

        // Define los estados de la aplicación.
        const states = {
            stopped: { color: 'stopped', text: 'Grabar' },
            recording: { color: 'recording', text: 'Grabando' },
            paused: { color: 'paused', text: 'Pausa' }
        };

        let currentState = 'stopped';
        let doubleClickTimer = null;

        // Función para actualizar la apariencia del botón.
        function updateButton(state) {
            recordButton.className = state.color;
            recordButton.textContent = state.text;
        }

        // Maneja el evento de un solo clic.
        recordButton.addEventListener('click', () => {
            // Usa un temporizador para distinguir entre clic simple y doble clic.
            if (doubleClickTimer) {
                clearTimeout(doubleClickTimer);
                doubleClickTimer = null;
                // No hace nada si es parte de un doble clic
                return;
            }

            doubleClickTimer = setTimeout(() => {
                doubleClickTimer = null;
                if (currentState === 'stopped') {
                    currentState = 'recording';
                    stateText.textContent = "Grabando...";
                } else if (currentState === 'recording') {
                    currentState = 'paused';
                    stateText.textContent = "Grabación en pausa";
                } else if (currentState === 'paused') {
                    currentState = 'recording';
                    stateText.textContent = "Reanudando...";
                }
                updateButton(states[currentState]);
            }, 250); // El tiempo en milisegundos para detectar el doble clic.
        });

        // Maneja el evento de doble clic para detener.
        recordButton.addEventListener('dblclick', () => {
            if (doubleClickTimer) {
                clearTimeout(doubleClickTimer);
                doubleClickTimer = null;
            }
            currentState = 'stopped';
            updateButton(states[currentState]);
            stateText.textContent = "Grabación detenida";
        });

        // Maneja el evento del botón de resumen
        summarizeButton.addEventListener('click', async () => {
            const userQuery = scriptInput.value.trim();

            if (userQuery === "") {
                summaryOutput.classList.add('hidden');
                loadingSpinner.classList.add('hidden');
                return;
            }

            // Muestra el spinner de carga
            loadingSpinner.classList.remove('hidden');
            summaryOutput.classList.add('hidden');
            summaryText.textContent = '';
            
            // Constantes para la API de Gemini
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

            // Configuración del payload de la API
            const payload = {
                contents: [{
                    parts: [{ text: userQuery }]
                }],
                systemInstruction: {
                    parts: [{ text: "Actúa como un analista de video profesional. Proporciona un resumen conciso y claro de la transcripción del video. El resumen debe ser breve y directo. No incluyas un título o frases introductorias." }]
                },
                tools: [{ "google_search": {} }]
            };

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                const result = await response.json();
                const text = result?.candidates?.[0]?.content?.parts?.[0]?.text;

                if (text) {
                    summaryText.textContent = text;
                    summaryOutput.classList.remove('hidden');
                } else {
                    summaryText.textContent = "No se pudo generar el resumen. Inténtalo de nuevo.";
                    summaryOutput.classList.remove('hidden');
                }
            } catch (error) {
                console.error('Error al llamar a la API de Gemini:', error);
                summaryText.textContent = "Ocurrió un error. Por favor, revisa la consola para más detalles.";
                summaryOutput.classList.remove('hidden');
            } finally {
                loadingSpinner.classList.add('hidden');
            }
        });

        // Inicializa el botón en su estado inicial.
        document.addEventListener('DOMContentLoaded', () => {
            updateButton(states.stopped);

            // Registra el Service Worker
            if ('serviceWorker' in navigator) {
                window.addEventListener('load', () => {
                    navigator.serviceWorker.register('/service-worker.js')
                        .then(registration => {
                            console.log('Service Worker registrado con éxito:', registration);
                        })
                        .catch(error => {
                            console.log('Fallo el registro del Service Worker:', error);
                        });
                });
            }
        });
    </script>
</body>
</html>


